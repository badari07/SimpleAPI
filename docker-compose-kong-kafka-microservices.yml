version: '3.8'

services:
  # Infrastructure Services
  mysql:
    image: mysql:8.0
    container_name: ecommerce-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ecommerce
      MYSQL_USER: ecommerce
      MYSQL_PASSWORD: ecommerce123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.0.0
    container_name: ecommerce-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Database
  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ecommerce-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ecommerce-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Gateway
  kong:
    image: kong:3.4
    container_name: kong-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
    ports:
      - "8000:8000"  # Kong Proxy
      - "8001:8001"  # Kong Admin API
      - "8002:8002"  # Kong Admin GUI
    depends_on:
      kong-database:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Microservices with Kafka Integration
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/ecommerce
      - SPRING_DATASOURCE_USERNAME=ecommerce
      - SPRING_DATASOURCE_PASSWORD=ecommerce123
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_ACKS=all
      - SPRING_KAFKA_PRODUCER_RETRIES=3
      - SPRING_KAFKA_CONSUMER_GROUP_ID=user-service-group
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
      - SERVER_PORT=8081
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  product-service:
    build: ./product-service
    container_name: product-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/ecommerce
      - SPRING_DATASOURCE_USERNAME=ecommerce
      - SPRING_DATASOURCE_PASSWORD=ecommerce123
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_ACKS=all
      - SPRING_KAFKA_PRODUCER_RETRIES=3
      - SPRING_KAFKA_CONSUMER_GROUP_ID=product-service-group
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - SERVER_PORT=8082
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  cart-service:
    build: ./cart-service
    container_name: cart-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/ecommerce
      - SPRING_DATASOURCE_USERNAME=ecommerce
      - SPRING_DATASOURCE_PASSWORD=ecommerce123
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_ACKS=all
      - SPRING_KAFKA_PRODUCER_RETRIES=3
      - SPRING_KAFKA_CONSUMER_GROUP_ID=cart-service-group
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
      - SERVER_PORT=8083
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/ecommerce
      - SPRING_DATASOURCE_USERNAME=ecommerce
      - SPRING_DATASOURCE_PASSWORD=ecommerce123
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_ACKS=all
      - SPRING_KAFKA_PRODUCER_RETRIES=3
      - SPRING_KAFKA_CONSUMER_GROUP_ID=order-service-group
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
      - SERVER_PORT=8084
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/ecommerce
      - SPRING_DATASOURCE_USERNAME=ecommerce
      - SPRING_DATASOURCE_PASSWORD=ecommerce123
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_ACKS=all
      - SPRING_KAFKA_PRODUCER_RETRIES=3
      - SPRING_KAFKA_CONSUMER_GROUP_ID=payment-service-group
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
      - SERVER_PORT=8085
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/ecommerce
      - SPRING_DATASOURCE_USERNAME=ecommerce
      - SPRING_DATASOURCE_PASSWORD=ecommerce123
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_ACKS=all
      - SPRING_KAFKA_PRODUCER_RETRIES=3
      - SPRING_KAFKA_CONSUMER_GROUP_ID=notification-service-group
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
      - SPRING_MAIL_HOST=smtp.gmail.com
      - SPRING_MAIL_PORT=587
      - SPRING_MAIL_USERNAME=${MAIL_USERNAME}
      - SPRING_MAIL_PASSWORD=${MAIL_PASSWORD}
      - SERVER_PORT=8086
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kong Configuration Service
  kong-config:
    image: curlimages/curl:latest
    container_name: kong-config
    depends_on:
      kong:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    networks:
      - ecommerce-network
    command: |
      sh -c '
        echo "Waiting for all services to be ready..."
        sleep 60
        
        echo "Configuring Kong services and routes..."
        
        # User Service
        curl -X POST http://kong:8001/services \
          --data "name=user-service" \
          --data "url=http://user-service:8081"
        
        curl -X POST http://kong:8001/services/user-service/routes \
          --data "paths[]=/api/users" \
          --data "strip_path=true"
        
        # Product Service
        curl -X POST http://kong:8001/services \
          --data "name=product-service" \
          --data "url=http://product-service:8082"
        
        curl -X POST http://kong:8001/services/product-service/routes \
          --data "paths[]=/api/products" \
          --data "strip_path=true"
        
        # Cart Service
        curl -X POST http://kong:8001/services \
          --data "name=cart-service" \
          --data "url=http://cart-service:8083"
        
        curl -X POST http://kong:8001/services/cart-service/routes \
          --data "paths[]=/api/cart" \
          --data "strip_path=true"
        
        # Order Service
        curl -X POST http://kong:8001/services \
          --data "name=order-service" \
          --data "url=http://order-service:8084"
        
        curl -X POST http://kong:8001/services/order-service/routes \
          --data "paths[]=/api/orders" \
          --data "strip_path=true"
        
        # Payment Service
        curl -X POST http://kong:8001/services \
          --data "name=payment-service" \
          --data "url=http://payment-service:8085"
        
        curl -X POST http://kong:8001/services/payment-service/routes \
          --data "paths[]=/api/payments" \
          --data "strip_path=true"
        
        # Notification Service
        curl -X POST http://kong:8001/services \
          --data "name=notification-service" \
          --data "url=http://notification-service:8086"
        
        curl -X POST http://kong:8001/services/notification-service/routes \
          --data "paths[]=/api/notifications" \
          --data "strip_path=true"
        
        echo "Adding Kong plugins..."
        
        # Rate Limiting Plugin
        curl -X POST http://kong:8001/plugins \
          --data "name=rate-limiting" \
          --data "config.minute=100" \
          --data "config.hour=1000" \
          --data "config.day=10000"
        
        # CORS Plugin
        curl -X POST http://kong:8001/plugins \
          --data "name=cors" \
          --data "config.origins=*" \
          --data "config.methods=GET,POST,PUT,DELETE,OPTIONS" \
          --data "config.headers=Accept,Accept-Version,Content-Length,Content-MD5,Content-Type,Date,X-Auth-Token"
        
        # JWT Plugin for Authentication
        curl -X POST http://kong:8001/plugins \
          --data "name=jwt" \
          --data "config.uri_param_names=jwt" \
          --data "config.key_claim_name=iss" \
          --data "config.secret_is_base64=false"
        
        # Request/Response Logging Plugin
        curl -X POST http://kong:8001/plugins \
          --data "name=file-log" \
          --data "config.path=/tmp/kong.log"
        
        # Prometheus Metrics Plugin
        curl -X POST http://kong:8001/plugins \
          --data "name=prometheus" \
          --data "config.per_consumer=false"
        
        echo "Kong configuration completed!"
      '

  # Kafka Topics Creator
  kafka-topics:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-topics
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-network
    command: |
      sh -c '
        echo "Waiting for Kafka to be ready..."
        sleep 30
        
        echo "Creating Kafka topics for microservices communication..."
        
        # User Events Topic
        kafka-topics --create --topic user-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1
        
        # Product Events Topic
        kafka-topics --create --topic product-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1
        
        # Cart Events Topic
        kafka-topics --create --topic cart-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1
        
        # Order Events Topic
        kafka-topics --create --topic order-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1
        
        # Payment Events Topic
        kafka-topics --create --topic payment-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1
        
        # Notification Events Topic
        kafka-topics --create --topic notification-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1
        
        # Audit Events Topic
        kafka-topics --create --topic audit-events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1
        
        echo "Kafka topics created successfully!"
      '

  # Kafka UI for Management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: ecommerce-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - ecommerce-network

volumes:
  mysql_data:
  redis_data:
  elasticsearch_data:
  kong_data:
  kafka_data:

networks:
  ecommerce-network:
    driver: bridge

